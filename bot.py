import logging
import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from config import TOKEN
from analyze import analyze_resume, compare_resumes
from pdf_parser import extract_text_from_pdf

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def setup_db():
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute(
        """CREATE TABLE IF NOT EXISTS resumes 
        (id INTEGER PRIMARY KEY, user_id INTEGER, name TEXT, resume TEXT, result TEXT)"""
    )
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ —Ñ–∞–π–ª–æ–º PDF.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
@dp.message(lambda message: message.text and len(message.text) > 20)
async def handle_text_resume(message: types.Message):
    user_resume = message.text
    result = analyze_resume(user_resume)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
    save_to_db(message.from_user.id, message.from_user.full_name, user_resume, result)
    await message.answer(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –∑–∞–≤–µ—Ä—à—ë–Ω:\n{result}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞ PDF
@dp.message(lambda message: message.document and message.document.mime_type == "application/pdf")
async def handle_pdf_resume(message: types.Message):
    file_id = message.document.file_id
    file_info = await bot.get_file(file_id)
    file_path = file_info.file_path
    await message.answer("üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF. –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
    text = extract_text_from_pdf(file_path)  # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
    result = analyze_resume(text)
    save_to_db(message.from_user.id, message.from_user.full_name, text, result)
    await message.answer(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –∑–∞–≤–µ—Ä—à—ë–Ω:\n{result}")

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
def save_to_db(user_id, name, resume, result):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO resumes (user_id, name, resume, result) VALUES (?, ?, ?, ?)", 
                   (user_id, name, resume, result))
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /compare (–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ)
@dp.message(Command("compare"))
async def compare_command(message: types.Message):
    conn = sqlite3.connect("database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT name, resume FROM resumes")
    resumes = cursor.fetchall()
    conn.close()

    if len(resumes) < 2:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Ä–µ–∑—é–º–µ.")
        return

    comparison_result = compare_resumes(resumes)
    await message.answer(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:\n\n{comparison_result}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    setup_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
